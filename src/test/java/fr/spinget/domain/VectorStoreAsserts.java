package fr.spinget.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VectorStoreAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVectorStoreAllPropertiesEquals(VectorStore expected, VectorStore actual) {
        assertVectorStoreAutoGeneratedPropertiesEquals(expected, actual);
        assertVectorStoreAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVectorStoreAllUpdatablePropertiesEquals(VectorStore expected, VectorStore actual) {
        assertVectorStoreUpdatableFieldsEquals(expected, actual);
        assertVectorStoreUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVectorStoreAutoGeneratedPropertiesEquals(VectorStore expected, VectorStore actual) {
        assertThat(expected)
            .as("Verify VectorStore auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVectorStoreUpdatableFieldsEquals(VectorStore expected, VectorStore actual) {
        assertThat(expected)
            .as("Verify VectorStore relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getMetadata()).as("check metadata").isEqualTo(actual.getMetadata()))
            .satisfies(e -> assertThat(e.getCommune()).as("check commune").isEqualTo(actual.getCommune()))
            .satisfies(e -> assertThat(e.getCodePostal()).as("check codePostal").isEqualTo(actual.getCodePostal()))
            .satisfies(e -> assertThat(e.getCodeDepartement()).as("check codeDepartement").isEqualTo(actual.getCodeDepartement()))
            .satisfies(e -> assertThat(e.getTypeLocal()).as("check typeLocal").isEqualTo(actual.getTypeLocal()))
            .satisfies(e -> assertThat(e.getSuperficieCarrez()).as("check superficieCarrez").isEqualTo(actual.getSuperficieCarrez()))
            .satisfies(e -> assertThat(e.getSuperficieTerrain()).as("check superficieTerrain").isEqualTo(actual.getSuperficieTerrain()))
            .satisfies(e -> assertThat(e.getNbPieces()).as("check nbPieces").isEqualTo(actual.getNbPieces()))
            .satisfies(e -> assertThat(e.getValeur()).as("check valeur").isEqualTo(actual.getValeur()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVectorStoreUpdatableRelationshipsEquals(VectorStore expected, VectorStore actual) {}
}
